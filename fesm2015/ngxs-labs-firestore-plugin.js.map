{"version":3,"file":"ngxs-labs-firestore-plugin.js","sources":["../../../src/lib/ngxs-firestore-connect.actions.ts","../../../src/lib/ngxs-firestore.state.ts","../../../src/lib/tokens.ts","../../../src/lib/actions.ts","../../../src/lib/ngxs-firestore-page.service.ts","../../../src/lib/ngxs-firestore.module.ts","../../../src/lib/ngxs-firestore.adapter.ts","../../../src/lib/ngxs-firestore.service.ts","../../../src/lib/action-decorator-helpers.ts","../../../src/lib/attach-action.ts","../../../src/lib/ngxs-firestore-connect.service.ts","../../../src/lib/ngxs-firestore-connections.selector.ts","../../../src/ngxs-labs-firestore-plugin.ts"],"sourcesContent":["namespace NgxsFirestoreDebugPayloads {\n  export interface StreamEmitted {\n    id: string;\n    items: any;\n  }\n}\n\nexport namespace NgxsFirestoreConnectActions {\n  export class StreamConnected {\n    static readonly type = '[NgxsFirestore] Connected';\n    constructor(public payload: string) {}\n  }\n  export class StreamEmitted {\n    static readonly type = '[NgxsFirestore] Emitted';\n    constructor(public payload: NgxsFirestoreDebugPayloads.StreamEmitted) {}\n  }\n  export class StreamDisconnected {\n    static readonly type = '[NgxsFirestore] Disconnected';\n    constructor(public payload: string) {}\n  }\n}\n","import { State, StateContext, NgxsOnInit, Action } from '@ngxs/store';\nimport { NgxsFirestoreConnectActions } from './ngxs-firestore-connect.actions';\nimport { patch, insertItem, removeItem, updateItem } from '@ngxs/store/operators';\nimport { Injectable } from '@angular/core';\n\nexport interface FirestoreConnection {\n  id: string;\n  connectedAt: Date;\n  emmitedAt: Date[];\n}\n\nexport interface NgxsFirestoreStateModel {\n  connections: FirestoreConnection[];\n}\n\n@State<NgxsFirestoreStateModel>({\n  name: 'ngxs_firestore',\n  defaults: {\n    connections: []\n  }\n})\n@Injectable()\nexport class NgxsFirestoreState implements NgxsOnInit {\n  ngxsOnInit(_ctx: StateContext<NgxsFirestoreStateModel>) {}\n\n  @Action([NgxsFirestoreConnectActions.StreamConnected])\n  streamConnected(\n    { setState }: StateContext<NgxsFirestoreStateModel>,\n    { payload }: NgxsFirestoreConnectActions.StreamConnected\n  ) {\n    const conn = {\n      connectedAt: new Date(),\n      id: payload\n    } as FirestoreConnection;\n    setState(patch({ connections: insertItem(conn) }));\n  }\n\n  @Action([NgxsFirestoreConnectActions.StreamEmitted])\n  streamEmitted(\n    { setState }: StateContext<NgxsFirestoreStateModel>,\n    { payload }: NgxsFirestoreConnectActions.StreamEmitted\n  ) {\n    const { id } = payload;\n    setState(\n      patch<NgxsFirestoreStateModel>({\n        connections: updateItem((x) => x.id === id, patch({ emmitedAt: insertItem(new Date()) }))\n      })\n    );\n  }\n\n  @Action([NgxsFirestoreConnectActions.StreamDisconnected])\n  streamDisconnected(\n    { setState, getState }: StateContext<NgxsFirestoreStateModel>,\n    { payload }: NgxsFirestoreConnectActions.StreamDisconnected\n  ) {\n    setState(\n      patch<NgxsFirestoreStateModel>({ connections: removeItem((x) => x.id === payload) })\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface NgxsFirestoreModuleOptions {\n  timeoutWriteOperations: number | false;\n}\n\nexport const NGXS_FIRESTORE_MODULE_OPTIONS = new InjectionToken<NgxsFirestoreModuleOptions>(\n  'NGXS_FIRESTORE_MODULE_OPTIONS'\n);\n","export class DisconnectAll {\n  static readonly type = '[NgxsFirestore] DisconnectAll';\n}\n\nexport class Disconnect {\n  static readonly type = '[NgxsFirestore] Disconnect';\n  constructor(public payload: any) {}\n}\n\nexport class GetNextPage {\n  static readonly type = 'GetNextPage';\n  constructor(public payload: string) {}\n}\n\nexport class GetLastPage {\n  static readonly type = 'GetLastPage';\n  constructor(public payload: string) {}\n}\n","import { Injectable } from '@angular/core';\nimport { defer, Observable } from 'rxjs';\nimport { filter, map, startWith, switchMap } from 'rxjs/operators';\nimport { Actions, getActionTypeFromInstance, ofActionDispatched } from '@ngxs/store';\nimport { AngularFirestore, FieldPath, QueryFn } from '@angular/fire/firestore';\nimport { GetNextPage, GetLastPage } from './actions';\nexport interface FirestorePage {\n  limit: number;\n  id: string;\n}\n\n@Injectable()\nexport class NgxsFirestorePageIdService {\n  constructor(private firestore: AngularFirestore) {}\n\n  createId() {\n    return this.firestore.createId();\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class NgxsFirestorePageService {\n  constructor(private actions$: Actions, private pageId: NgxsFirestorePageIdService) {}\n\n  create<T>(\n    queryFn: (pageFn: QueryFn) => Observable<T>,\n    size: number,\n    orderBy: { fieldPath: string | FieldPath; directionStr?: 'desc' | 'asc' }[]\n  ): Observable<{ results: T; pageId: string }> {\n    return defer(() => {\n      const pages: FirestorePage[] = [];\n\n      return this.actions$.pipe(\n        ofActionDispatched(GetNextPage, GetLastPage),\n        startWith('INIT'),\n        map((action) => {\n          const actionType = <'GetNextPage' | 'GetLastPage'>getActionTypeFromInstance(action);\n          const payload = action === 'INIT' ? this.pageId.createId() : action.payload;\n          return { payload, actionType: actionType || 'GetNextPage' };\n        }),\n        filter(({ payload, actionType }) => {\n          return pages.length === 0 || !!pages.find((page) => page.id === payload);\n        }),\n        map(({ payload, actionType }) => {\n          const thePage = pages.find((page) => page.id === payload);\n          let limit = thePage?.limit || 0;\n\n          if (actionType === 'GetNextPage') {\n            limit += size;\n          } else if (limit - size > 0) {\n            limit -= size;\n          }\n\n          const skip = thePage?.limit === limit;\n\n          if (thePage) {\n            thePage.limit = limit;\n          } else {\n            pages.push({ id: payload, limit });\n          }\n\n          return { pageId: payload, limit, skip };\n        }),\n        filter(({ skip }) => {\n          return !skip;\n        }),\n        switchMap(({ pageId, limit }) => {\n          return queryFn((ref) => {\n            return orderBy\n              .reduce((prev, curr) => prev.orderBy(curr.fieldPath, curr.directionStr || 'asc'), ref)\n              .limit(limit);\n          }).pipe(\n            map((results) => {\n              return { results, pageId, pageSize: limit };\n            })\n          );\n        })\n      );\n    });\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxsModule } from '@ngxs/store';\nimport { NgxsFirestoreState } from './ngxs-firestore.state';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { NgxsFirestoreModuleOptions, NGXS_FIRESTORE_MODULE_OPTIONS } from './tokens';\nimport { NgxsFirestorePageIdService } from './ngxs-firestore-page.service';\n\n@NgModule({\n  imports: [CommonModule, NgxsModule.forFeature([NgxsFirestoreState]), AngularFirestoreModule]\n})\nexport class NgxsFirestoreModule {\n  public static forRoot(options?: NgxsFirestoreModuleOptions): ModuleWithProviders<NgxsFirestoreModule> {\n    return {\n      ngModule: NgxsFirestoreModule,\n      providers: [\n        {\n          provide: NGXS_FIRESTORE_MODULE_OPTIONS,\n          useValue: options || ({ timeoutWriteOperations: false } as NgxsFirestoreModuleOptions)\n        },\n        {\n          provide: NgxsFirestorePageIdService,\n          useClass: NgxsFirestorePageIdService\n        }\n      ]\n    };\n  }\n}\n","import { AngularFirestore } from '@angular/fire/firestore';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { NgxsFirestoreModuleOptions, NGXS_FIRESTORE_MODULE_OPTIONS } from './tokens';\nimport { Store } from '@ngxs/store';\nimport 'firebase/firestore';\n\n@Injectable({ providedIn: 'root' })\nexport class NgxsFirestoreAdapter {\n  constructor(\n    @Inject(AngularFirestore) public firestore: AngularFirestore,\n    @Inject(Store) public store: Store,\n    @Optional() @Inject(NGXS_FIRESTORE_MODULE_OPTIONS) public options: NgxsFirestoreModuleOptions\n  ) {}\n}\n","import { QueryFn, QueryDocumentSnapshot } from '@angular/fire/firestore';\nimport { Observable, from, of } from 'rxjs';\nimport { Inject, Injectable } from '@angular/core';\nimport { map, take, mapTo, timeoutWith } from 'rxjs/operators';\nimport { NgxsFirestoreAdapter } from './ngxs-firestore.adapter';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\n\n/**\n * Changes the behavior of a set() call to only replace the values specified\n * in its data argument. Fields omitted from the set() call remain\n * untouched.\n */\ninterface SetOptions {\n  merge: boolean;\n}\n\n@Injectable()\nexport abstract class NgxsFirestore<T> {\n  constructor(@Inject(NgxsFirestoreAdapter) protected adapter: NgxsFirestoreAdapter) {}\n\n  protected abstract path: string;\n  protected idField: string = 'id';\n  protected converter: firebase.firestore.FirestoreDataConverter<T> = {\n    toFirestore: (value) => {\n      return value;\n    },\n    fromFirestore: (snapshot, options) => {\n      return { ...(<T>snapshot.data(options)) };\n    }\n  };\n\n  public createId() {\n    return this.adapter.firestore.createId();\n  }\n\n  public doc$(id: string): Observable<T> {\n    return this.adapter.firestore\n      .doc<T>(this.docRef(id))\n      .snapshotChanges()\n      .pipe(\n        map((docSnapshot) => {\n          if (docSnapshot.payload.exists) {\n            return this.getDataWithId(docSnapshot.payload);\n          } else {\n            return undefined;\n          }\n        })\n      );\n  }\n\n  public docOnce$(id: string): Observable<T> {\n    return this.doc$(id).pipe(take(1));\n  }\n\n  public collection$(queryFn: QueryFn = (ref) => ref): Observable<T[]> {\n    return this.adapter.firestore\n      .collection<T>(this.path, (ref) => {\n        return queryFn(ref.withConverter(this.converter));\n      })\n      .snapshotChanges()\n      .pipe(\n        map((docSnapshots) =>\n          docSnapshots.map((docSnapshot) => {\n            return this.getDataWithId(docSnapshot.payload.doc);\n          })\n        )\n      );\n  }\n\n  public collectionOnce$(queryFn?: QueryFn): Observable<T[]> {\n    return this.collection$(queryFn).pipe(take(1));\n  }\n\n  public update$(id: string, value: Partial<T>, setOptions?: SetOptions) {\n    return this.docSet(id, value, setOptions);\n  }\n\n  public delete$(id: string) {\n    return from(this.doc(id).delete()).pipe();\n  }\n\n  public create$(value: Partial<T>): Observable<string> {\n    return this.upsert$(value);\n  }\n\n  public upsert$(value: Partial<T>, setOptions?: SetOptions): Observable<string> {\n    let id;\n    let newValue;\n\n    if (Object.keys(value).includes(this.idField) && !!value[this.idField]) {\n      id = value[this.idField];\n      newValue = Object.assign({}, value);\n    } else {\n      id = this.createId();\n      newValue = Object.assign({}, value, { [this.idField]: id });\n    }\n\n    return this.docSet(id, newValue, setOptions);\n  }\n\n  private getDataWithId<TData>(doc: QueryDocumentSnapshot<TData>) {\n    const data = doc.data();\n    const id = (data && data[this.idField]) || doc.id;\n    return { ...data, [this.idField]: id };\n  }\n\n  private doc(id: string) {\n    return this.adapter.firestore.doc(this.docRef(id));\n  }\n\n  private docSet(id: string, value: any, setOptions?: SetOptions) {\n    setOptions = setOptions || { merge: true };\n\n    if (this.isOffline()) {\n      this.doc(id).set(value, setOptions);\n      return of(id);\n    }\n\n    if (this.adapter.options && this.adapter.options.timeoutWriteOperations) {\n      return from(this.doc(id).set(value, setOptions)).pipe(\n        timeoutWith(this.adapter.options.timeoutWriteOperations, of(id)),\n        mapTo(id)\n      );\n    } else {\n      return from(this.doc(id).set(value, setOptions)).pipe(mapTo(id));\n    }\n  }\n\n  private docRef(id: string) {\n    return this.adapter.firestore.doc(`${this.path}/${id}`).ref.withConverter(this.converter);\n  }\n\n  private isOffline() {\n    return navigator.onLine !== undefined && !navigator.onLine;\n  }\n}\n","import { ActionType } from '@ngxs/store';\n\nexport function StreamConnected(actionType: ActionType) {\n  return class {\n    static readonly type = `${actionType.type} Connected`;\n    constructor(public action: any) {}\n  };\n}\n\nexport function StreamEmitted(actionType: ActionType) {\n  return class {\n    static readonly type = `${actionType.type} Emitted`;\n    constructor(public action: any, public payload: any) {}\n  };\n}\n\nexport function StreamDisconnected(actionType: ActionType) {\n  return class {\n    static readonly type = `${actionType.type} Disconnected`;\n    constructor(public action: any) {}\n  };\n}\n\nexport function StreamErrored(actionType: ActionType) {\n  return class {\n    static readonly type = `${actionType.type} Errored`;\n    constructor(public action: any, public error: any) {}\n  };\n}\n","import { Action, ActionOptions, ActionType, StateContext } from '@ngxs/store';\n\n/**\n * This key is used to retrieve static metadatas on state classes.\n * This constant is taken from the core codebase\n */\nconst META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\n\nexport function attachAction<S, A>(\n  storeClass: any,\n  action: ActionType,\n  fn: (ctx: StateContext<S>, action: A) => any,\n  options?: ActionOptions\n): void {\n  if (!storeClass[META_OPTIONS_KEY]) {\n    throw new Error('storeClass is not a valid NGXS Store');\n  }\n\n  const methodName = getActionMethodName(action);\n\n  storeClass.prototype[methodName] = function(_state: any, _action: any): any {\n    return fn(_state, _action);\n  };\n\n  Action(action, options)({ constructor: storeClass }, methodName, null);\n}\n\nconst getActionMethodName = (action: ActionType) => {\n  const actionName = action.type.replace(/[^a-zA-Z0-9]+/g, '');\n  return `${actionName}`;\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Store, ActionType, Actions, ofActionDispatched } from '@ngxs/store';\nimport { tap, catchError, mergeMap, takeUntil, finalize, filter, take, share } from 'rxjs/operators';\nimport { Observable, race, Subscription, Subject, defer, of } from 'rxjs';\nimport { StreamConnected, StreamEmitted, StreamDisconnected, StreamErrored } from './action-decorator-helpers';\nimport { NgxsFirestoreConnectActions } from './ngxs-firestore-connect.actions';\nimport { DisconnectAll, Disconnect } from './actions';\nimport { attachAction } from './attach-action';\nimport { NgxsFirestoreState } from './ngxs-firestore.state';\n\ninterface ActionTypeDef<T> {\n  type: string;\n  new (...args: any): T;\n}\n\nfunction defaultTrackBy(action: any) {\n  return '';\n}\n\nfunction streamId(opts: { actionType: ActionType; action: any; trackBy: (action: any) => string }) {\n  let id = `${opts.actionType.type}`;\n  if (opts.trackBy(opts.action)) {\n    id = id.concat(` (${opts.trackBy(opts.action)})`);\n  }\n  return id;\n}\n\nfunction tapOnce<T>(fn: (value) => void) {\n  return (source: Observable<any>) =>\n    defer(() => {\n      let first = true;\n      return source.pipe(\n        tap<T>((payload) => {\n          if (first) {\n            fn(payload);\n          }\n          first = false;\n        })\n      );\n    }).pipe(share());\n}\n\n@Injectable({ providedIn: 'root' })\nexport class NgxsFirestoreConnect implements OnDestroy {\n  private firestoreConnectionsSub: Subscription[] = [];\n  private activeFirestoreConnections: string[] = [];\n  private actionsPending: string[] = [];\n\n  constructor(private store: Store, private actions: Actions) {}\n\n  /**\n   * Connect a query that will dispatch a `StreamEmitted` action on each emission.\n   *\n   * @param actionType Action to connect with\n   * @param opts.to Firestore Query to connect with\n   * @param opts.trackBy used to allow multiple connections for a same action, and Disconnect them individually\n   * @param opts.connectedActionFinishesOn complete connected action on first emit or stream completed\n   * @param opts.cancelPrevious cancel previous connected action, (when used combined with trackBy, will cancel stream with same id)\n   */\n  connect<T>(\n    actionType: ActionTypeDef<T>,\n    opts: {\n      to: (action: T) => Observable<any>;\n      trackBy?: (action: T) => string;\n      connectedActionFinishesOn?: 'FirstEmit' | 'StreamCompleted';\n      cancelPrevious?: boolean;\n    }\n  ) {\n    const connectedActionFinishesOn = opts.connectedActionFinishesOn || 'FirstEmit';\n    const trackBy = opts.trackBy || defaultTrackBy;\n    const cancelPrevious = opts.cancelPrevious;\n\n    interface CompletedHandler {\n      actionCompletedHandlerSubject: Subject<unknown>;\n    }\n\n    const subjects: { [key: string]: CompletedHandler } = {};\n    function getSubjects(id: string): CompletedHandler {\n      if (!subjects[id]) {\n        const actionCompletedHandlerSubject = new Subject();\n        subjects[id] = {\n          actionCompletedHandlerSubject\n        };\n      }\n\n      return subjects[id];\n    }\n\n    attachAction(NgxsFirestoreState, actionType, (_stateContext, action) => {\n      const { actionCompletedHandlerSubject } = getSubjects(streamId({ actionType, action, trackBy }));\n\n      const completed$ = actionCompletedHandlerSubject.asObservable().pipe(take(1));\n\n      if (cancelPrevious) {\n        return completed$;\n      }\n\n      if (this.activeFirestoreConnections.includes(streamId({ actionType, action, trackBy }))) {\n        return;\n      }\n\n      if (this.actionsPending.includes(streamId({ actionType, action, trackBy }))) {\n        return completed$;\n      }\n\n      return completed$;\n    });\n\n    const actionDispatched$ = this.actions.pipe(\n      ofActionDispatched(actionType),\n      // filter actions not connected already\n      // or cancelPrevious\n      filter((action) => {\n        return cancelPrevious || !this.activeFirestoreConnections.includes(streamId({ actionType, action, trackBy }));\n      }),\n      // filter actions dispatched on same tick\n      filter((action) => {\n        return !this.actionsPending.includes(streamId({ actionType, action, trackBy }));\n      }),\n      tap((action) => {\n        this.actionsPending.push(streamId({ actionType, action, trackBy }));\n      })\n    );\n\n    const firestoreStreamHandler$ = (action) => {\n      const streamFn = opts.to;\n      return streamFn(action).pipe(\n        // connected\n        tapOnce((_) => {\n          const StreamConnectedClass = StreamConnected(actionType);\n          this.store.dispatch(new StreamConnectedClass(action));\n          this.activeFirestoreConnections.push(streamId({ actionType, action, trackBy }));\n          // remove from actionsPending once connected\n          this.actionsPending.splice(this.actionsPending.indexOf(streamId({ actionType, action, trackBy })), 1);\n\n          this.store.dispatch(\n            new NgxsFirestoreConnectActions.StreamConnected(streamId({ actionType, action, trackBy }))\n          );\n        }),\n        // emmited\n        tap((payload) => {\n          const StreamEmittedClass = StreamEmitted(actionType);\n          this.store.dispatch(new StreamEmittedClass(action, payload));\n          this.store.dispatch(\n            new NgxsFirestoreConnectActions.StreamEmitted({\n              id: streamId({ actionType, action, trackBy }),\n              items: payload\n            })\n          );\n        }),\n        // completed if FirstEmit\n        tapOnce(() => {\n          if (connectedActionFinishesOn === 'FirstEmit') {\n            const { actionCompletedHandlerSubject } = getSubjects(streamId({ actionType, action, trackBy }));\n            actionCompletedHandlerSubject.next(action);\n          }\n        }),\n        // disconnect on Disconnect\n        takeUntil(\n          race(\n            this.actions.pipe(ofActionDispatched(DisconnectAll)),\n            this.actions.pipe(ofActionDispatched(Disconnect)).pipe(\n              filter((disconnectAction) => {\n                const { payload } = disconnectAction;\n                if (!payload) {\n                  return false;\n                }\n                const disconnectedStreamId = streamId({\n                  actionType: payload.constructor || payload,\n                  action: disconnectAction.payload,\n                  trackBy\n                });\n                if (disconnectedStreamId === streamId({ actionType, action, trackBy })) {\n                  return true;\n                }\n\n                return false;\n              })\n            )\n          )\n        ),\n        // disconnect on action re-dispatched\n        takeUntil(\n          this.actions.pipe(\n            ofActionDispatched(actionType),\n            filter((dispatchedAction) => {\n              if (!cancelPrevious) {\n                return false;\n              }\n              //SELF\n              if (dispatchedAction === action) {\n                return false;\n              }\n              const dispatchedActionStreamId = streamId({\n                actionType,\n                action: dispatchedAction,\n                trackBy\n              });\n              return dispatchedActionStreamId === streamId({ actionType, action, trackBy });\n            })\n          )\n        ),\n        finalize(() => {\n          const StreamDisconnectedClass = StreamDisconnected(actionType);\n          this.store.dispatch(new StreamDisconnectedClass(action));\n          this.store.dispatch(\n            new NgxsFirestoreConnectActions.StreamDisconnected(streamId({ actionType, action, trackBy }))\n          );\n          this.activeFirestoreConnections.splice(\n            this.activeFirestoreConnections.indexOf(streamId({ actionType, action, trackBy })),\n            1\n          );\n\n          // completed if StreamCompleted\n          if (connectedActionFinishesOn === 'StreamCompleted') {\n            const { actionCompletedHandlerSubject } = getSubjects(streamId({ actionType, action, trackBy }));\n            actionCompletedHandlerSubject.next(action);\n          }\n        }),\n        catchError((err) => {\n          const { actionCompletedHandlerSubject } = getSubjects(streamId({ actionType, action, trackBy }));\n          actionCompletedHandlerSubject.error(err);\n\n          const StreamErroredClass = StreamErrored(actionType);\n          this.store.dispatch(new StreamErroredClass(action, err));\n\n          return of({});\n        })\n      );\n    };\n\n    this.firestoreConnectionsSub.push(actionDispatched$.pipe(mergeMap(firestoreStreamHandler$)).subscribe());\n  }\n\n  ngOnDestroy() {\n    if (this.firestoreConnectionsSub) {\n      this.firestoreConnectionsSub.forEach((sub) => sub.unsubscribe());\n    }\n  }\n}\n","import { createSelector } from '@ngxs/store';\nimport { NgxsFirestoreState, NgxsFirestoreStateModel } from './ngxs-firestore.state';\n\nexport const ngxsFirectoreConnections = createSelector([NgxsFirestoreState], (state: NgxsFirestoreStateModel) => {\n  return state.connections;\n});\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {NgxsFirestoreConnectActions as ɵb} from './lib/ngxs-firestore-connect.actions';\nexport {NgxsFirestoreState as ɵa} from './lib/ngxs-firestore.state';\nexport {NGXS_FIRESTORE_MODULE_OPTIONS as ɵd,NgxsFirestoreModuleOptions as ɵc} from './lib/tokens';"],"names":[],"mappings":"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"}