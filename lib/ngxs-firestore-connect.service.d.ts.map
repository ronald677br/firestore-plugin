{"version":3,"file":"ngxs-firestore-connect.service.d.ts","sources":["ngxs-firestore-connect.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA","sourcesContent":["import { OnDestroy } from '@angular/core';\nimport { Store, Actions } from '@ngxs/store';\nimport { Observable } from 'rxjs';\ninterface ActionTypeDef<T> {\n    type: string;\n    new (...args: any): T;\n}\nexport declare class NgxsFirestoreConnect implements OnDestroy {\n    private store;\n    private actions;\n    private firestoreConnectionsSub;\n    private activeFirestoreConnections;\n    private actionsPending;\n    constructor(store: Store, actions: Actions);\n    /**\n     * Connect a query that will dispatch a `StreamEmitted` action on each emission.\n     *\n     * @param actionType Action to connect with\n     * @param opts.to Firestore Query to connect with\n     * @param opts.trackBy used to allow multiple connections for a same action, and Disconnect them individually\n     * @param opts.connectedActionFinishesOn complete connected action on first emit or stream completed\n     * @param opts.cancelPrevious cancel previous connected action, (when used combined with trackBy, will cancel stream with same id)\n     */\n    connect<T>(actionType: ActionTypeDef<T>, opts: {\n        to: (action: T) => Observable<any>;\n        trackBy?: (action: T) => string;\n        connectedActionFinishesOn?: 'FirstEmit' | 'StreamCompleted';\n        cancelPrevious?: boolean;\n    }): void;\n    ngOnDestroy(): void;\n}\nexport {};\n"]}